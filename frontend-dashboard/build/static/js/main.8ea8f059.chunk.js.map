{"version":3,"sources":["components/Sidenav/Sidenav.js","components/DeviceCard/DeviceCard.js","assets/Utils.js","pages/Devices/Devices.js","components/SensorCard/SensorCard.js","pages/Devices/DeviceDetails/DeviceDetails.js","pages/Sensors/Sensors.js","components/Loading/Loading.js","pages/Sensors/SensorDetails/Visualization/Visualization.js","pages/Sensors/SensorDetails/SensorDetails.js","pages/Readings/Readings.js","pages/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["Sidenav","props","useState","navOpen","setNavOpen","highlightedLink","setHighlightedLink","displace_width","displace","location","useLocation","darken_page","onClick","className","style","width","useEffect","current_root_path","pathname","split","i","links","length","route","left","color","icon","faWindowClose","faBars","map","link","index","to","text","DeviceCard","device","dev_id","dev_name","faMicrochip","dev_desc","dev_location","epochToDateTime_mdYHs","unixtimestamp","date","Date","year","getFullYear","getMonth","getDate","getHours","getMinutes","substr","apiUri","Devices","devices","setDevices","console","log","fetch","then","res","json","response","item","key","textDecoration","state","SensorCard","sensor","faProjectDiagram","sensor_id","sensor_name","sensor_pv","sensor_units","sensor_desc","DeviceDetails","slug","useParams","data","sensors","setSensors","dev_arch","dev_os","Sensors","Loading","faSpinner","spin","size","Visualization","readingLabels","setReadingLabels","readingValues","setReadingValues","chart_data","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderWidth","baseUri","period","reading","epochToDateTime_mdY","ts","val","options","responsive","maintainAspectRatio","title","display","units","fontSize","fontFamily","fontStyle","fontColor","legend","position","top","zIndex","SensorDetails","setSensor","Readings","readings","setReadings","Home","recentReadings","setRecentReadings","deviceCount","setDeviceCount","sensorCount","setSensorCount","sensor_count","device_count","App","faHome","faChartLine","setResponse","status","path","component","DevicesDetails","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wiBAUe,SAASA,EAAQC,GAAQ,IAAD,EAELC,oBAAS,GAFJ,mBAE5BC,EAF4B,KAEnBC,EAFmB,OAGWF,oBAAU,GAHrB,mBAG5BG,EAH4B,KAGXC,EAHW,KAK/BC,EAAkBN,EAAMO,SAAY,QAAU,OAC9CC,EAAWC,cAEXC,EACA,yBACIC,QAAS,kBAAMR,GAAW,IAC1BS,UAAU,cACVC,MAAO,CAAEC,OAAmB,IAAZZ,EAAmB,QAAU,SAgBrD,OAZAa,qBAAU,WAGN,IAFA,IAAIC,EAAoB,IAAMR,EAASS,SAASC,MAAM,KAAK,GAEnDC,EAAE,EAAEA,EAAEnB,EAAMoB,MAAMC,OAAOF,IAC7B,GAAGnB,EAAMoB,MAAMD,GAAGG,QAAUN,EAAkB,CAC1CX,EAAmBc,GACnB,SAIT,CAACX,IAGA,yBAAKI,UAAU,aACX,yBAAKA,UAAU,SAASC,MAAO,CAAEC,OAAmB,IAAZZ,EAAmBI,EAAiB,UAC5E,yBAAKM,UAAU,UAAUC,MAAO,CAAEU,MAAkB,IAAZrB,EAAmB,IAAM,WAE7D,4BACI,yBAAKU,UAAU,cACX,kBAAC,IAAD,CACID,QAAS,kBAAMR,GAAYD,IAC3BW,MAAO,CAAEW,MAAO,IAChBZ,UAAU,YACVa,KAAOvB,EAAmBwB,IAATC,OAGxB3B,EAAMoB,MAAMQ,KAAI,SAACC,EAAMC,GAAP,OACb,wBAAIlB,UAAWR,IAAoB0B,EAAO,gBAAiB,GACvDnB,QAAS,kBAAIN,EAAmByB,KAEhC,kBAAC,IAAD,CAAMC,GAAIF,EAAKP,OACX,2BAAIO,EAAKG,MACRH,EAAKJ,YAOzBzB,EAAMO,SAAW,KAAOG,G,cCzDtB,SAASuB,EAAWjC,GAC/B,IAAIkC,EAASlC,EAAMkC,OACnB,OACI,yBAAKtB,UAAU,eACX,uBAAGA,UAAU,yBAAb,cAAkDsB,EAAOC,QAEzD,yBAAKvB,UAAU,sBACX,uBAAGA,UAAU,2BAA2BsB,EAAOE,UAC/C,kBAAC,IAAD,CAAiBxB,UAAU,0BAA0Ba,KAAMY,OAI/D,uBAAGzB,UAAU,oBAAoBsB,EAAOI,UACxC,uBAAG1B,UAAU,4BAAb,aAAmDsB,EAAOK,eCrB/D,IAIMC,EAAwB,SAACC,GAClC,IACIC,EAAO,IAAIC,KAAmB,IAAdF,GAChBG,EAAOF,EAAKG,cAOhB,MATiB,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAG7DH,EAAKI,YAKL,IAJbJ,EAAKK,UAIgB,IAAIH,EAAK,IAH5BF,EAAKM,WAGmC,KAFtC,IAAMN,EAAKO,cAEyCC,QAAQ,IAgBjEC,EAAS,yCChBP,SAASC,EAAQpD,GAAQ,IAAD,EACPC,mBAAS,IADF,mBAC9BoD,EAD8B,KACrBC,EADqB,KAkBrC,OAZAvC,qBAAU,WAERwC,QAAQC,IAAI,wBACZC,MAFcN,kDAGXO,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJP,EAAWO,GACXN,QAAQC,IAAIK,QAGf,IAGD,yBAAKjD,UAAU,oBACb,yBAAKA,UAAU,UACb,wBAAIA,UAAU,oBAAd,YAGA,yBAAKA,UAAU,eAGXyC,EAAQzB,KAAI,SAACkC,EAAMhC,GAAP,OACV,kBAAC,IAAD,CAAMiC,IAAKjC,EAAQgC,EAAMjD,MAAO,CAAEW,MAAO,QAASwC,eAAgB,QAAUjC,GAAI,CAAEd,SAAS,WAAD,OAAa6C,EAAK3B,QAAU8B,MAAO,CAAE/B,OAAQ4B,KACrI,kBAAC,EAAD,CAAY5B,OAAQ4B,U,OCpCrB,SAASI,EAAWlE,GAC/B,IAAImE,EAASnE,EAAMmE,OACnB,OACI,yBAAKvD,UAAU,eACX,kBAAC,IAAD,CAAiBA,UAAU,cAAca,KAAM2C,MAE/C,uBAAGxD,UAAU,aAAb,cAAqCuD,EAAOE,WAE5C,uBAAGzD,UAAU,eAAeuD,EAAOG,aAEnC,yBAAK1D,UAAU,eACX,uBAAGA,UAAU,gBAAgBuD,EAAOI,WAAa,SACjD,uBAAG3D,UAAU,gBAAb,QAAoCuD,EAAOK,eAG/C,uBAAG5D,UAAU,sBAAsBuD,EAAOM,c,OCTvC,SAASC,EAAc1E,GAAQ,IACpC2E,EAASC,cAATD,KACFE,EAAOpE,cAF8B,EAIXR,mBAAS,IAJE,mBAIlC6E,EAJkC,KAIzBC,EAJyB,KAmBzC,OAVAhE,qBAAU,WAEN0C,MADcN,EAAS,oBAAsBwB,GAExCjB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACFkB,EAAWlB,QAGpB,IAGC,yBAAKjD,UAAU,WACX,yBAAKA,UAAU,UACX,wBAAIA,UAAU,oBAAd,WAA0CiE,EAAKZ,MAAM/B,OAAOE,WAGhE,yBAAKxB,UAAU,mBACf,wBAAIA,UAAU,mBAAd,WAEI,+BACI,+BACA,4BACI,wBAAIA,UAAU,oBAAd,OACA,wBAAIA,UAAU,aAAaiE,EAAKZ,MAAM/B,OAAOC,SAEjD,4BACI,wBAAIvB,UAAU,oBAAd,SACA,wBAAIA,UAAU,aAAaiE,EAAKZ,MAAM/B,OAAO8C,WAEjD,4BACI,wBAAIpE,UAAU,oBAAd,OACA,wBAAIA,UAAU,aAAaiE,EAAKZ,MAAM/B,OAAO+C,SAEjD,4BACI,wBAAIrE,UAAU,oBAAd,aACA,wBAAIA,UAAU,aAAaiE,EAAKZ,MAAM/B,OAAOK,eAEjD,4BACI,wBAAI3B,UAAU,oBAAd,gBACA,wBAAIA,UAAU,aAAaiE,EAAKZ,MAAM/B,OAAOI,cAOzD,yBAAK1B,UAAU,WACf,wBAAIA,UAAU,mBAAd,qBAEI,yBAAKA,UAAU,gBACVkE,EAAQzD,OAAS,EACbyD,EAAQlD,KAAK,SAACkC,EAAMhC,GAAP,OACV,yBAAKlB,UAAU,SAASmD,IAAKD,EAAOhC,GAChC,kBAAC,IAAD,CAAMiC,IAAKjC,EAAQgC,EAAMjD,MAAO,CAAEW,MAAO,QAASwC,eAAgB,QAAUjC,GAAI,CAAEd,SAAS,YAAD,OAAc6C,EAAKO,WAAaJ,MAAO,CAAEE,OAAQL,KACvI,kBAAC,EAAD,CAAYK,OAAQL,SAIhC,uBAAGlD,UAAU,eAAb,wB,OCrET,SAASsE,EAAQlF,GAAQ,IAAD,EAELC,mBAAS,IAFJ,mBAE5B6E,EAF4B,KAEnBC,EAFmB,KAmBnC,OAXAhE,qBAAU,WAENwC,QAAQC,IAAI,yBACZC,MAFcN,kDAGTO,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACFkB,EAAWlB,QAGpB,IAGC,yBAAKjD,WAAS,GACV,yBAAKA,UAAU,UACX,wBAAIA,UAAU,oBAAd,YAEJ,yBAAKA,UAAU,mBACVkE,EAAQlD,KAAI,SAACkC,EAAMhC,GAAP,OACT,yBAAKlB,UAAU,eACX,kBAAC,IAAD,CAAMmD,IAAKjC,EAAQgC,EAAMjD,MAAO,CAAEW,MAAO,QAASwC,eAAgB,QAAUjC,GAAI,CAAEd,SAAS,WAAD,OAAa6C,EAAKO,WAAaJ,MAAO,CAAEE,OAAQL,KACtI,kBAAC,EAAD,CAAYK,OAAQL,W,0BChCjC,SAASqB,EAAQnF,GAC5B,OACI,yBAAKY,UAAU,gBACX,yBAAKA,UAAU,WACX,uBAAGA,UAAU,0BAAb,mBACA,uBAAGA,UAAU,6BAAb,kBACA,kBAAC,IAAD,CAAiBA,UAAU,eAAea,KAAM2D,IAAWC,MAAI,EAACC,KAAK,SCHtE,SAASC,EAAcvF,GAAQ,IAAD,EAEDC,mBAAS,IAFR,mBAEpCuF,EAFoC,KAErBC,EAFqB,OAGDxF,mBAAS,IAHR,mBAGpCyF,EAHoC,KAGrBC,EAHqB,KAKnCC,EAAa,CACfC,OAAQL,EACRM,SAAU,CACN,CACIC,MAAO,WACPC,MAAM,EACNC,YAAa,IACbC,gBAAiB,qBACjBC,YAAa,gBACbC,YAAa,EACbvB,KAAMa,KAgBlB,OAXA3E,qBAAU,WACN,IAAIsF,EAAUlD,EAAS,mBAAqBnD,EAAMqE,UAAY,WAAarE,EAAMsG,OACjF/C,QAAQC,IAAI,WAAa6C,GACzB5C,MAAM4C,GACD3C,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACF4B,EAAiB5B,EAASjC,KAAI,SAAC2E,GAAD,ONlBX,SAAC9D,GAChC,IACIC,EAAO,IAAIC,KAAmB,IAAdF,GAChBG,EAAOF,EAAKG,cAKhB,MAPiB,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAG7DH,EAAKI,YAGL,IAFbJ,EAAKK,UAEgB,IAAIH,EMWoB4D,CAAoBD,EAAQE,QACvEd,EAAiB9B,EAASjC,KAAI,SAAC2E,GAAD,OAAaA,EAAQG,aAE5D,IAGC,yBAAK9F,UAAU,yBACV4E,EAAcnE,OAAS,EACpB,oCACA,yBAAKT,UAAU,4BACf,kBAAC,IAAD,CACIiE,KAAMe,EACNe,QAAS,CACLC,YAAY,EACZC,qBAAqB,EACrBC,MAAO,CACHC,SAAS,EACT/E,KAAMhC,EAAMsG,OAAS,cAAgBtG,EAAMgH,MAAQ,IACnDC,SAAU,GACVC,WAAY,SACZC,UAAW,IACXC,UAAW,sBAEfC,OAAQ,CACJN,SAAS,OAMzB,yBAAKnG,UAAU,uBACX,+BACI,+BACI,wBAAIA,UAAU,eAAeC,MAAO,CAACyG,SAAU,SAAUC,IAAK,IAAKC,OAAQ,MACvE,wBAAI5G,UAAU,oBAAd,aACA,wBAAIA,UAAU,oBAAd,SAAwCZ,EAAMgH,MAA9C,MAGHxB,EAAc5D,KAAI,SAACmE,EAAOjE,GAAR,OACf,4BACI,wBAAIlB,UAAU,aAAcmF,GAC5B,wBAAInF,UAAU,aAAa8E,EAAc5D,YAQzD,kBAAC,EAAD,O,OCxED,SAAS2F,EAAczH,GAAQ,IACtC2E,EAASC,cAATD,KADqC,EAEjB1E,mBAAS,IAFQ,mBAEtCkE,EAFsC,KAE9BuD,EAF8B,OAIHzH,mBAAS,IAJN,mBAIvBwF,GAJuB,aAKHxF,mBAAS,IALN,mBAKvB0F,GALuB,WA6C3C,OApBA5E,qBAAU,WAER0C,MADcN,EAAS,WAAawB,GAEjCjB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ6D,EAAU7D,QAGb,IAEH9C,qBAAU,WAER0C,MADcN,EAAS,mBAAqBwB,EAAO,kBAEhDjB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ4B,EAAiB5B,EAASjC,KAAI,SAAC2E,GAAD,OAAcA,EAAQE,OACpDd,EAAiB9B,EAASjC,KAAI,SAAC2E,GAAD,OAAaA,EAAQG,aAEtD,IAID,yBAAK9F,UAAU,uBACb,yBAAKA,UAAU,UACb,wBAAIA,UAAU,oBAAd,WAA0CuD,EAAOG,cAEnD,yBAAK1D,UAAU,QACb,kBAAC,EAAD,CAAe0F,OAAO,SAASjC,UAAWM,EAAMqC,MAAO7C,EAAOK,eAC9D,kBAAC,EAAD,CAAe8B,OAAO,QAAQjC,UAAWM,EAAMqC,MAAO7C,EAAOK,iB,OCxDtD,SAASmD,EAAS3H,GAAQ,IAAD,EAERC,mBAAS,IAFD,mBAEjC2H,EAFiC,KAEvBC,EAFuB,KActC,OAVA9G,qBAAU,WAER0C,MADcN,6DAEXO,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJgE,EAAYhE,QAGf,IAGD,6BACE,yBAAKjD,UAAU,UACb,wBAAIA,UAAU,oBAAd,aAGDgH,EAASvG,OAAS,EACjB,yBAAKT,UAAU,sBACb,2BAAOC,MAAO,CAACC,MAAO,SACpB,+BACE,wBAAIF,UAAU,gBACZ,wBAAIA,UAAU,oBAAd,aACA,wBAAIA,UAAU,oBAAd,aACA,wBAAIA,UAAU,oBAAd,SACA,wBAAIA,UAAU,oBAAd,UAEDgH,EAAShG,KAAI,SAAC2E,EAASzE,GAAV,OACZ,4BACE,wBAAIlB,UAAU,aAAa4B,EAAsB+D,EAAQE,KACzD,wBAAI7F,UAAU,aAAa2F,EAAQlC,WACnC,wBAAIzD,UAAU,aAAa2F,EAAQG,KACnC,wBAAI9F,UAAU,aAAa2F,EAAQS,cAS7C,kBAAC,EAAD,O,OCxCO,SAASc,IAAQ,IAAD,EAEe7H,mBAAS,IAFxB,mBAEtB8H,EAFsB,KAENC,EAFM,OAGW/H,mBAAS,GAHpB,mBAGpBgI,EAHoB,KAGPC,EAHO,OAIWjI,mBAAS,GAJpB,mBAIpBkI,EAJoB,KAIPC,EAJO,KAoC3B,OA9BArH,qBAAU,WAEN0C,MADcN,sEAETO,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACFmE,EAAkBnE,QAG3B,IAEH9C,qBAAU,WAEN0C,MADcN,uDAETO,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACFuE,EAAevE,EAASwE,mBAGjC,IAEHtH,qBAAU,WAEN0C,MADcN,uDAETO,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACFqE,EAAerE,EAASyE,mBAGjC,IAGC,yBAAK1H,UAAU,aACX,yBAAKA,UAAU,UACX,wBAAIA,UAAU,oBAAd,SAKJ,yBAAKA,UAAU,gBACX,kBAAC,IAAD,CAAMmD,IAAK,eAAgBlD,MAAO,CAAEW,MAAO,QAASwC,eAAgB,QAAUjC,GAAI,CAAEd,SAAS,aACzF,yBAAKL,UAAU,kBACX,kBAAC,IAAD,CAAiBA,UAAU,eAAea,KAAMY,MAChD,yBAAKzB,UAAU,mBACX,uBAAGA,UAAU,oBAAb,WACA,uBAAGA,UAAU,iBAAiBqH,MAM1C,kBAAC,IAAD,CAAMlE,IAAK,eAAgBlD,MAAO,CAAEW,MAAO,QAASwC,eAAgB,QAAUjC,GAAI,CAAEd,SAAS,aACzF,yBAAKL,UAAU,kBACX,kBAAC,IAAD,CAAiBA,UAAU,eAAea,KAAM2C,MAChD,yBAAKxD,UAAU,mBACX,uBAAGA,UAAU,oBAAb,WACA,uBAAGA,UAAU,iBAAiBuH,OAO9C,6BACI,uBAAGvH,UAAU,SAAb,uBACA,yBAAKA,UAAU,yBACX,2BAAOC,MAAO,CAACC,MAAO,SAClB,+BACI,wBAAIF,UAAU,eAAeC,MAAO,CAACyG,SAAU,SAAUC,IAAK,IAAKC,OAAQ,MACvE,wBAAI5G,UAAU,oBAAd,aACA,wBAAIA,UAAU,oBAAd,aACA,wBAAIA,UAAU,oBAAd,SACA,wBAAIA,UAAU,oBAAd,UAEHmH,EAAenG,KAAI,SAAC2E,EAASzE,GAAV,OAChB,4BACI,wBAAIlB,UAAU,aAAa4B,EAAsB+D,EAAQE,KACzD,wBAAI7F,UAAU,aAAa2F,EAAQlC,WACnC,wBAAIzD,UAAU,aAAa2F,EAAQG,KACnC,wBAAI9F,UAAU,aAAa2F,EAAQS,gBCnBxDuB,MAlDf,WAEE,IAAInH,EAAQ,CACV,CAAEY,KAAM,OAAQV,MAAO,QAASG,KAAM,kBAAC,IAAD,CAAiBA,KAAM+G,OAC7D,CAAExG,KAAM,UAAWV,MAAO,WAAYG,KAAM,kBAAC,IAAD,CAAiBA,KAAMY,OACnE,CAAEL,KAAM,UAAWV,MAAO,WAAYG,KAAM,kBAAC,IAAD,CAAiBA,KAAM2C,OACnE,CAAEpC,KAAM,WAAYV,MAAO,YAAaG,KAAM,kBAAC,IAAD,CAAiBA,KAAMgH,QAN1D,EASmBxI,mBAAS,IAT5B,mBASN4D,EATM,KASI6E,EATJ,KAoBb,OAVA3H,qBAAU,WACR0C,MAAMN,GACHO,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJN,QAAQC,IAAI,WAAaK,EAAS8E,QAClCD,EAAY7E,EAAS8E,aAGxB,IAKD,yBAAK/H,UAAU,OAGC,OAAbiD,EACC,oCACE,kBAAC,EAAD,CAASzC,MAAOA,IAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOwH,KAAK,iBAAiBC,UAAWpB,IACxC,kBAAC,IAAD,CAAOmB,KAAK,YAAYC,UAAW3D,IAEnC,kBAAC,IAAD,CAAO0D,KAAK,YAAYC,UAAWlB,IACnC,kBAAC,IAAD,CAAOiB,KAAK,iBAAiBC,UAAWC,IACxC,kBAAC,IAAD,CAAOF,KAAK,WAAWC,UAAWzF,IAClC,kBAAC,IAAD,CAAOwF,KAAK,IAAIC,UAAWf,MAK/B,kBAAC,EAAD,QCzDYiB,QACW,cAA7BC,OAAOxI,SAASyI,UAEe,UAA7BD,OAAOxI,SAASyI,UAEhBD,OAAOxI,SAASyI,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/F,MAAK,SAAAgG,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtG,QAAQsG,MAAMA,EAAMC,c","file":"static/js/main.8ea8f059.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom'\nimport { Link } from 'react-router-dom';\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faWindowClose } from \"@fortawesome/free-solid-svg-icons\";\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\n\nimport './Sidenav.scss';\n\nexport default function Sidenav(props) {\n\n    const [navOpen, setNavOpen] = useState(false);\n    const [highlightedLink, setHighlightedLink] = useState(-1);\n\n    let displace_width = (props.displace) ? '216px' : '48px';\n    let location = useLocation();\n\n    let darken_page =\n        <div\n            onClick={() => setNavOpen(false)}\n            className=\"darken-page\"\n            style={{ width: navOpen === true ? '100vw' : '0px' }}>\n        </div>\n\n\n    useEffect(() => {\n        let current_root_path = '/' + location.pathname.split('/')[1];\n\n        for(let i=0;i<props.links.length;i++){\n            if(props.links[i].route === current_root_path){\n                setHighlightedLink(i);\n                break;\n            } \n        }\n\n    }, [location]);\n\n    return (\n        <div className=\"container\">\n            <div className=\"spacer\" style={{ width: navOpen === true ? displace_width : '48px' }}></div>\n            <div className=\"sidenav\" style={{ left: navOpen === true ? '0' : '-168px' }}>\n\n                <ul>\n                    <div className=\"close-icon\">\n                        <FontAwesomeIcon\n                            onClick={() => setNavOpen(!navOpen)}\n                            style={{ color: '' }}\n                            className=\"menu-icon\"\n                            icon={!navOpen ? faBars : faWindowClose} />\n                    </div>\n\n                    {props.links.map((link, index) =>\n                        <li className={highlightedLink === index? 'selected-link': ''}\n                            onClick={()=>setHighlightedLink(index)}\n                        >\n                            <Link to={link.route}>\n                                <p>{link.text}</p>\n                                {link.icon}\n                            </Link>\n                        </li>\n                    )}\n                </ul>\n            </div>\n\n            {props.displace ? null : darken_page}\n\n        </div>\n    );\n};","import React from 'react';\nimport './DeviceCard.scss'\n// import '../../assets/card.scss'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMicrochip } from \"@fortawesome/free-solid-svg-icons\";\n\n\nexport default function DeviceCard(props) {\n    let device = props.device;\n    return (\n        <div className=\"device-card\">\n            <p className=\"device-card-subheader\" >device id: {device.dev_id}</p>\n\n            <div className=\"device-card-header\">\n                <p className=\"device-card-header-text\">{device.dev_name}</p>\n                <FontAwesomeIcon className=\"device-card-header-icon\" icon={faMicrochip} />\n            </div>\n\n\n            <p className=\"device-card-text\">{device.dev_desc}</p>\n            <p className=\"device-card-support-text\">location: {device.dev_location}</p>\n\n        </div>\n    );\n};","export const lastNofArray = (arr, n) => {\n    return arr.slice(Math.max(arr.length - n, 0));\n}\n\nexport const epochToDateTime_mdYHs = (unixtimestamp) => {\n    let months_arr = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n    var date = new Date(unixtimestamp*1000);\n    let year = date.getFullYear();\n    let month = months_arr[date.getMonth()];\n    let day = date.getDate();\n    let hours = date.getHours();\n    let minutes = \"0\" + date.getMinutes();\n\n    let dateString = month+'-'+day+'-'+year+' '+hours + ':' + minutes.substr(-2);\n    return dateString;\n}\n\nexport const epochToDateTime_mdY = (unixtimestamp) => {\n    let months_arr = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n    var date = new Date(unixtimestamp*1000);\n    let year = date.getFullYear();\n    let month = months_arr[date.getMonth()];\n    let day = date.getDate();\n\n    let dateString = month+'-'+day+'-'+year;\n    return dateString;\n}\n\n// export const apiUri = \"http://localhost:5000/\";\nexport const apiUri = \"https://iot-backend-178.herokuapp.com/\";\n\nexport const EPOCH_MONTH = 2592000;\nexport const EPOCH_WEEK = 604800;\nexport const EPOCH_DAY = 86400;\nexport const EPOCH_HOUR = 3600;","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport \"./Devices.scss\";\n\nimport \"../../components/DeviceCard/DeviceCard\";\nimport DeviceCard from '../../components/DeviceCard/DeviceCard';\n\nimport { apiUri } from '../../assets/Utils';\n\n\n\nexport default function Devices(props) {\n  const [devices, setDevices] = useState([]);\n\n  // let apiUri = \"http://localhost:5000/\";\n  // let apiUri = \"http://10.0.0.94:5000/\";\n\n  useEffect(() => {\n    let baseUri = apiUri + 'devices/';\n    console.log('fetching device list');\n    fetch(baseUri)\n      .then(res => res.json())\n      .then(response => {\n        setDevices(response);\n        console.log(response);\n      })\n\n  }, []);\n\n  return (\n    <div className=\"device-container\">\n      <div className=\"header\">\n        <h1 className=\"header-lettering\">Devices</h1>\n      </div>\n\n        <div className=\"device-grid\">\n\n          {\n            devices.map((item, index) =>\n              <Link key={index + item} style={{ color: 'black', textDecoration: 'none' }} to={{ pathname: `devices/${item.dev_id}`, state: { device: item } }}>\n                <DeviceCard device={item} />\n              </Link>\n            )\n\n          }\n\n        </div>\n\n    </div>\n\n  );\n\n};","import React from 'react';\nimport './SensorCard.scss'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faProjectDiagram } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function SensorCard(props) {\n    let sensor = props.sensor;\n    return (\n        <div className=\"sensor-card\">\n            <FontAwesomeIcon className=\"sensor-icon\" icon={faProjectDiagram} />\n\n            <p className=\"sensor-id\">sensor id: {sensor.sensor_id}</p>\n\n            <p className=\"sensor-name\">{sensor.sensor_name}</p>\n\n            <div className=\"sensor-data\">\n                <p className=\"sensor-value\">{sensor.sensor_pv || \"00.00\" }</p>\n                <p className=\"sensor-units\"> &nbsp;{sensor.sensor_units}</p>\n            </div>\n \n            <p className=\"sensor-description\">{sensor.sensor_desc}</p>\n        </div>\n    );\n};\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { useLocation } from \"react-router-dom\";\nimport { Link } from 'react-router-dom';\n\nimport { apiUri } from '../../../assets/Utils';\n\nimport SensorCard from '../../../components/SensorCard/SensorCard';\n\nimport \"./DeviceDetails.scss\"\n\nexport default function DeviceDetails(props) {\n    let { slug } = useParams();\n    let data = useLocation();\n\n    const [sensors, setSensors] = useState([]);\n\n    // let apiUri = \"http://localhost:5000/\";\n    // let apiUri = \"http://10.0.0.94:5000/\";\n\n    useEffect(() => {\n        let baseUri = apiUri + 'sensors/deviceId/' + slug;\n        fetch(baseUri)\n            .then(res => res.json())\n            .then(response => {\n                setSensors(response);\n\n            })\n    }, []);\n\n    return (\n        <div className=\"details\">\n            <div className=\"header\">\n                <h1 className=\"header-lettering\">Device: {data.state.device.dev_name}</h1>\n            </div>\n\n            <div className=\"properties-list\">\n            <h1 className=\"title-lettering\">Details</h1>\n\n                <table>\n                    <tbody>\n                    <tr>\n                        <td className=\"table-identifier\">ID:</td>\n                        <td className=\"table-val\">{data.state.device.dev_id}</td>\n                    </tr>\n                    <tr>\n                        <td className=\"table-identifier\">Arch:</td>\n                        <td className=\"table-val\">{data.state.device.dev_arch}</td>\n                    </tr>\n                    <tr>\n                        <td className=\"table-identifier\">OS:</td>\n                        <td className=\"table-val\">{data.state.device.dev_os}</td>\n                    </tr>\n                    <tr>\n                        <td className=\"table-identifier\">Location:</td>\n                        <td className=\"table-val\">{data.state.device.dev_location}</td>\n                    </tr>\n                    <tr>\n                        <td className=\"table-identifier\">Description:</td>\n                        <td className=\"table-val\">{data.state.device.dev_desc}</td>\n                    </tr>\n                    </tbody>\n                </table>\n            </div>\n\n\n            <div className=\"sensors\">\n            <h1 className=\"title-lettering\">Attached Sensors </h1>\n\n                <div className=\"sensors-list\">\n                    {sensors.length > 0 ?\n                        (sensors.map(((item, index) =>\n                            <div className=\"sensor\" key={item + index}>\n                                <Link key={index + item} style={{ color: 'black', textDecoration: 'none' }} to={{ pathname: `/sensors/${item.sensor_id}`, state: { sensor: item } }}>\n                                    <SensorCard sensor={item} />\n                                </Link>\n                            </div>)))\n                        :\n                        <p className=\"sensor-null\">No sensors found.</p>\n                    }\n                </div>\n            </div>\n\n        </div>\n    );\n};","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport \"./Sensors.scss\"\n\nimport '../../components/SensorCard/SensorCard';\nimport SensorCard from '../../components/SensorCard/SensorCard';\nimport { apiUri } from '../../assets/Utils';\n\n\nexport default function Sensors(props) {\n\n    const [sensors, setSensors] = useState([]);\n\n    // let apiUri = \"http://10.0.0.94:5000/\";\n    // let apiUri = \"http://localhost:5000/\";\n\n\n    useEffect(() => {\n        let baseUri = apiUri + 'sensors/';\n        console.log('fetching sensors list');\n        fetch(baseUri)\n            .then(res => res.json())\n            .then(response => {\n                setSensors(response);\n            })\n\n    }, []);\n\n    return (\n        <div className>\n            <div className=\"header\">\n                <h1 className=\"header-lettering\">Sensors</h1>\n            </div>\n            <div className=\"sensors-content\">\n                {sensors.map((item, index) =>\n                    <div className=\"sensor-item\">\n                        <Link key={index + item} style={{ color: 'black', textDecoration: 'none' }} to={{ pathname: `sensors/${item.sensor_id}`, state: { sensor: item } }}>\n                            <SensorCard sensor={item} />\n                        </Link>\n                        \n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport './Loading.scss';\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons'\n\nexport default function Loading(props) {\n    return (\n        <div className=\"loading-page\">\n            <div className=\"loading\">\n                <p className=\"loading-message-header\">Fetching Data..</p>\n                <p className=\"loading-message-subheader\">Please Wait...</p>\n                <FontAwesomeIcon className=\"loading-icon\" icon={faSpinner} spin size=\"lg\" />\n            </div>\n        </div>\n    );\n};","import React from 'react';\nimport { useState, useEffect } from 'react';\n\nimport { Line } from 'react-chartjs-2';\nimport { apiUri, epochToDateTime_mdY } from '../../../../assets/Utils';\n\nimport './Visualization.scss';\nimport Loading from '../../../../components/Loading/Loading';\n\nexport default function Visualization(props) {\n\n    let [readingLabels, setReadingLabels] = useState([]);\n    let [readingValues, setReadingValues] = useState([]);\n\n    const chart_data = {\n        labels: readingLabels,\n        datasets: [\n            {\n                label: 'Readings',\n                fill: false,\n                lineTension: 0.25,\n                backgroundColor: 'rgba(75,192,192,1)',\n                borderColor: 'rgba(0,0,0,1)',\n                borderWidth: 2,\n                data: readingValues\n            }\n        ]\n    }\n\n    useEffect(() => {\n        let baseUri = apiUri + 'readings/sensor/' + props.sensor_id + '?period=' + props.period;\n        console.log(\"baeURI: \" + baseUri);\n        fetch(baseUri)\n            .then(res => res.json())\n            .then(response => {\n                setReadingLabels(response.map((reading) => epochToDateTime_mdY(reading.ts)));\n                setReadingValues(response.map((reading) => reading.val));\n            })\n    }, []);\n\n    return (\n        <div className=\"visualization-content\">\n            {readingLabels.length > 0? (\n                <>\n                <div className=\"visualization-line-chart\" >\n                <Line\n                    data={chart_data}\n                    options={{\n                        responsive: true,\n                        maintainAspectRatio: false,\n                        title: {\n                            display: true,\n                            text: props.period + \" readings (\" + props.units + \")\",\n                            fontSize: 24,\n                            fontFamily: 'Ubuntu',\n                            fontStyle: 200,\n                            fontColor: \"rgb(145, 145, 145)\"\n                        },\n                        legend: {\n                            display: false\n                        }\n                    }}\n                />\n            </div>\n\n            <div className=\"visualization-table\">\n                <table>\n                    <tbody>\n                        <tr className=\"table-header\" style={{position: \"sticky\", top: \"0\", zIndex: \"1\"}}>\n                            <td className=\"table-identifier\">Timestamp</td>\n                            <td className=\"table-identifier\">Value({props.units})</td>\n                        </tr>\n\n                        {readingLabels.map((label, index) =>\n                            <tr>\n                                <td className=\"table-val\">{(label)}</td>\n                                <td className=\"table-val\">{readingValues[index]}</td>\n                            </tr>\n                        )}\n                    </tbody>\n                </table>\n            </div>\n            </>\n            ) : (\n                <Loading />\n            )}\n\n            \n\n\n\n        </div>\n    );\n};","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { useLocation } from \"react-router-dom\";\n\nimport { Line } from 'react-chartjs-2';\nimport { apiUri, epochToDateTime_mdY } from '../../../assets/Utils';\n\nimport Visualization from '../SensorDetails/Visualization/Visualization';\n\nimport './SensorDetails.scss';\n\nexport default function SensorDetails(props) {\n  let { slug } = useParams();\n  let [sensor, setSensor] = useState({});\n\n  let [readingLabels, setReadingLabels] = useState([]);\n  let [readingValues, setReadingValues] = useState([]);\n\n  const chart_data = {\n    labels: readingLabels,\n    datasets: [\n      {\n        label: 'Readings',\n        fill: false,\n        lineTension: 0.25,\n        backgroundColor: 'rgba(75,192,192,1)',\n        borderColor: 'rgba(0,0,0,1)',\n        borderWidth: 2,\n        data: readingValues\n      }\n    ]\n  }\n\n  // let apiUri = \"http://localhost:5000/\";\n  // let apiUri = \"http://10.0.0.94:5000/\";\n\n  useEffect(() => {\n    let baseUri = apiUri + 'sensors/' + slug;\n    fetch(baseUri)\n      .then(res => res.json())\n      .then(response => {\n        setSensor(response);\n      })\n\n  }, []);\n\n  useEffect(() => {\n    let baseUri = apiUri + 'readings/sensor/' + slug + '?period=weekly';\n    fetch(baseUri)\n      .then(res => res.json())\n      .then(response => {\n        setReadingLabels(response.map((reading) => (reading.ts)));\n        setReadingValues(response.map((reading) => reading.val));\n      })\n  }, []);\n\n  return (\n\n    <div className=\"sensor-details-page\">\n      <div className=\"header\">\n        <h1 className=\"header-lettering\">Sensor: {sensor.sensor_name}</h1>\n      </div>\n      <div className=\"data\">\n        <Visualization period=\"weekly\" sensor_id={slug} units={sensor.sensor_units}/>\n        <Visualization period=\"daily\" sensor_id={slug} units={sensor.sensor_units}/>\n        {/* <Visualization period=\"hourly\" sensor_id={slug}/> */}\n      </div>\n\n    </div>\n\n\n  );\n};","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom'\nimport { Link } from 'react-router-dom';\nimport \"./Readings.scss\"\n\nimport { apiUri, epochToDateTime_mdYHs } from '../../assets/Utils';\nimport Loading from '../../components/Loading/Loading';\n\nexport default function Readings(props) {\n\n  let [readings, setReadings] = useState([]);\n\n  useEffect(() => {\n    let baseUri = apiUri + 'readings?order=desc';\n    fetch(baseUri)\n      .then(res => res.json())\n      .then(response => {\n        setReadings(response);\n      })\n\n  }, []);\n\n  return (\n    <div>\n      <div className=\"header\">\n        <h1 className=\"header-lettering\">Readings</h1>\n      </div>\n\n      {readings.length > 0 ? (\n        <div className=\"all-readings-table\">\n          <table style={{width: \"90vw\"}}>\n            <tbody>\n              <tr className=\"table-header\">\n                <td className=\"table-identifier\">Timestamp</td>\n                <td className=\"table-identifier\">Sensor ID</td>\n                <td className=\"table-identifier\">Value</td>\n                <td className=\"table-identifier\">Units</td>\n              </tr>\n              {readings.map((reading, index) =>\n                <tr>\n                  <td className=\"table-val\">{epochToDateTime_mdYHs(reading.ts)}</td>\n                  <td className=\"table-val\">{reading.sensor_id}</td>\n                  <td className=\"table-val\">{reading.val}</td>\n                  <td className=\"table-val\">{reading.units}</td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n\n      )\n        :\n        <Loading />\n      }\n\n    </div>\n  );\n}","import React from 'react';\nimport { useState, useEffect } from 'react';\n\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMicrochip } from \"@fortawesome/free-solid-svg-icons\";\nimport { faProjectDiagram } from \"@fortawesome/free-solid-svg-icons\";\nimport { Link } from 'react-router-dom';\nimport { apiUri, epochToDateTime_mdYHs } from '../../assets/Utils';\n\n\nimport './Home.scss'\n\nexport default function Home() {\n\n    let [recentReadings, setRecentReadings] = useState([]);\n    const [deviceCount, setDeviceCount] = useState(0);\n    const [sensorCount, setSensorCount] = useState(0);\n\n    useEffect(() => {\n        let baseUri = apiUri + 'readings?order=desc&limit=30';\n        fetch(baseUri)\n            .then(res => res.json())\n            .then(response => {\n                setRecentReadings(response);\n            })\n\n    }, []);\n\n    useEffect(() => {\n        let baseUri = apiUri + 'sensors/count';\n        fetch(baseUri)\n            .then(res => res.json())\n            .then(response => {\n                setSensorCount(response.sensor_count);\n            })\n\n    }, []);\n\n    useEffect(() => {\n        let baseUri = apiUri + 'devices/count';\n        fetch(baseUri)\n            .then(res => res.json())\n            .then(response => {\n                setDeviceCount(response.device_count);\n            })\n\n    }, []);\n\n    return (\n        <div className=\"home-page\">\n            <div className=\"header\">\n                <h1 className=\"header-lettering\">Home</h1>\n            </div>\n\n            {/* <p className=\"title\">System Status:</p> */}\n\n            <div className=\"home-summary\">\n                <Link key={'devices-link'} style={{ color: 'black', textDecoration: 'none' }} to={{ pathname: `/devices` }}>\n                    <div className=\"summary-widget\">\n                        <FontAwesomeIcon className=\"summary-icon\" icon={faMicrochip} />\n                        <div className=\"summary-details\">\n                            <p className=\"summary-property\">Devices</p>\n                            <p className=\"summary-value\">{deviceCount}</p>\n                        </div>\n                    </div>\n                </Link>\n\n\n                <Link key={'devices-link'} style={{ color: 'black', textDecoration: 'none' }} to={{ pathname: `/sensors` }}>\n                    <div className=\"summary-widget\">\n                        <FontAwesomeIcon className=\"summary-icon\" icon={faProjectDiagram} />\n                        <div className=\"summary-details\">\n                            <p className=\"summary-property\">Sensors</p>\n                            <p className=\"summary-value\">{sensorCount}</p>\n                        </div>\n                    </div>\n                </Link>\n\n            </div>\n\n            <div>\n                <p className=\"title\">Recent Measurements</p>\n                <div className=\"recent-readings-table\" >\n                    <table style={{width: \"80vw\"}}>\n                        <tbody>\n                            <tr className=\"table-header\" style={{position: \"sticky\", top: \"0\", zIndex: \"1\"}}>\n                                <td className=\"table-identifier\">Timestamp</td>\n                                <td className=\"table-identifier\">Sensor ID</td>\n                                <td className=\"table-identifier\">Value</td>\n                                <td className=\"table-identifier\">Units</td>\n                            </tr>\n                            {recentReadings.map((reading, index) =>\n                                <tr>\n                                    <td className=\"table-val\">{epochToDateTime_mdYHs(reading.ts)}</td>\n                                    <td className=\"table-val\">{reading.sensor_id}</td>\n                                    <td className=\"table-val\">{reading.val}</td>\n                                    <td className=\"table-val\">{reading.units}</td>\n                                </tr>\n                            )}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n\n        </div>\n    );\n\n}","import React from 'react';\nimport \"./App.scss\"\n\nimport { Router, Switch, Route } from \"react-router-dom\";\nimport { useState, useEffect } from 'react';\n\n\n\nimport Sidenav from './components/Sidenav/Sidenav'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHome } from \"@fortawesome/free-solid-svg-icons\";\nimport { faMicrochip } from \"@fortawesome/free-solid-svg-icons\";\nimport { faProjectDiagram } from \"@fortawesome/free-solid-svg-icons\";\nimport { faChartLine } from \"@fortawesome/free-solid-svg-icons\";\n\nimport Devices from './pages/Devices/Devices';\nimport DevicesDetails from './pages/Devices/DeviceDetails/DeviceDetails';\nimport Sensors from './pages/Sensors/Sensors';\nimport SensorDetails from './pages/Sensors/SensorDetails/SensorDetails';\nimport Readings from './pages/Readings/Readings';\nimport Home from './pages/Home/Home'\n\nimport Loading from './components/Loading/Loading';\n\nimport { useLocation } from 'react-router-dom'\nimport { apiUri } from './assets/Utils';\n\n// update Sensors set sensor_pv = 49.89 where sensor_id=3;\nfunction App() {\n\n  let links = [\n    { text: \"Home\", route: \"/home\", icon: <FontAwesomeIcon icon={faHome} /> },\n    { text: \"Devices\", route: \"/devices\", icon: <FontAwesomeIcon icon={faMicrochip} /> },\n    { text: \"Sensors\", route: \"/sensors\", icon: <FontAwesomeIcon icon={faProjectDiagram} /> },\n    { text: \"Readings\", route: \"/readings\", icon: <FontAwesomeIcon icon={faChartLine} /> },\n  ];\n\n  const [response, setResponse] = useState('');\n  useEffect(() => {\n    fetch(apiUri)\n      .then(res => res.json())\n      .then(response => {\n        console.log('status: ' + response.status);\n        setResponse(response.status);\n      })\n\n  }, []);\n\n  return (\n\n\n    <div className=\"App\">\n\n\n      {response === 'OK' ? (\n        <>\n          <Sidenav links={links} />\n          <Switch>\n            <Route path=\"/sensors/:slug\" component={SensorDetails}></Route>\n            <Route path=\"/sensors/\" component={Sensors}></Route>\n\n            <Route path=\"/readings\" component={Readings}></Route>\n            <Route path=\"/devices/:slug\" component={DevicesDetails}></Route>\n            <Route path=\"/devices\" component={Devices}></Route>\n            <Route path=\"/\" component={Home}></Route>\n          </Switch>\n        </>\n\n      ) :\n        <Loading />\n      }\n\n\n    </div>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}